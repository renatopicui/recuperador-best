-- ===================================================================
-- üß™ TESTE R√ÅPIDO - VERIFICAR SE EST√Å FUNCIONANDO
-- ===================================================================
-- Execute este script para testar se tudo voltou a funcionar
-- ===================================================================

-- TESTE 1: Ver se h√° pagamentos esperando checkout
SELECT 'üîç TESTE 1: PAGAMENTOS SEM CHECKOUT' as teste;

SELECT 
    p.id,
    p.customer_email,
    p.created_at,
    ROUND(EXTRACT(EPOCH FROM (NOW() - p.created_at)) / 60, 2) as minutos_desde_criacao,
    CASE 
        WHEN EXTRACT(EPOCH FROM (NOW() - p.created_at)) / 60 >= 3 
        THEN '‚úÖ Passou 3 minutos - DEVE criar checkout'
        ELSE '‚è≥ Faltam ' || ROUND(3 - EXTRACT(EPOCH FROM (NOW() - p.created_at)) / 60, 1)::text || ' minutos'
    END as status
FROM payments p
LEFT JOIN checkout_links cl ON cl.payment_id = p.id
WHERE p.status = 'waiting_payment'
AND cl.id IS NULL
ORDER BY p.created_at DESC
LIMIT 5;

-- ===================================================================

-- TESTE 2: Executar fun√ß√£o manualmente
SELECT 'üöÄ TESTE 2: EXECUTAR FUN√á√ÉO' as teste;

SELECT generate_checkout_links_for_pending_payments() as resultado;

-- Resultado esperado: {"created": X, "errors": 0}

-- ===================================================================

-- TESTE 3: Ver checkouts criados recentemente
SELECT '‚úÖ TESTE 3: CHECKOUTS CRIADOS' as teste;

SELECT 
    cl.checkout_slug,
    cl.customer_email,
    cl.created_at,
    cl.expires_at,
    ROUND(EXTRACT(EPOCH FROM (cl.expires_at - cl.created_at)) / 3600, 2) as horas_expiracao,
    CASE 
        WHEN ROUND(EXTRACT(EPOCH FROM (cl.expires_at - cl.created_at)) / 3600, 2) = 24
        THEN '‚úÖ 24 horas (correto!)'
        WHEN ROUND(EXTRACT(EPOCH FROM (cl.expires_at - cl.created_at)) / 3600, 2) < 1
        THEN '‚ùå Menos de 1 hora (errado!)'
        ELSE '‚ö†Ô∏è ' || ROUND(EXTRACT(EPOCH FROM (cl.expires_at - cl.created_at)) / 3600, 2)::text || ' horas'
    END as validacao
FROM checkout_links cl
WHERE cl.created_at > NOW() - INTERVAL '30 minutes'
ORDER BY cl.created_at DESC
LIMIT 10;

-- ===================================================================

-- TESTE 4: Ver configura√ß√£o da coluna
SELECT '‚öôÔ∏è TESTE 4: CONFIGURA√á√ÉO' as teste;

SELECT 
    column_default as expires_at_default,
    CASE 
        WHEN column_default LIKE '%24:00:00%' 
        THEN '‚úÖ Configurado para 24 horas'
        WHEN column_default LIKE '%00:15:00%'
        THEN '‚ùå Ainda em 15 minutos'
        ELSE '‚ö†Ô∏è Valor: ' || column_default
    END as validacao
FROM information_schema.columns
WHERE table_name = 'checkout_links'
AND column_name = 'expires_at';

-- ===================================================================

-- TESTE 5: Ver fun√ß√£o (ver o tempo de espera)
SELECT 'üîß TESTE 5: FUN√á√ÉO' as teste;

SELECT 
    routine_name,
    CASE 
        WHEN routine_definition LIKE '%3 minutes%'
        THEN '‚úÖ Fun√ß√£o correta (espera 3 minutos)'
        WHEN routine_definition LIKE '%1 hour%'
        THEN '‚ùå Fun√ß√£o errada (espera 1 hora)'
        ELSE '‚ö†Ô∏è Verificar manualmente'
    END as validacao
FROM information_schema.routines
WHERE routine_name = 'generate_checkout_links_for_pending_payments'
AND routine_schema = 'public';

-- ===================================================================

-- TESTE 6: Resumo Final
SELECT 'üìä RESUMO FINAL' as tipo;

WITH config AS (
    SELECT 
        CASE 
            WHEN column_default LIKE '%24:00:00%' THEN true
            ELSE false
        END as expiracao_24h
    FROM information_schema.columns
    WHERE table_name = 'checkout_links' AND column_name = 'expires_at'
),
funcao AS (
    SELECT 
        CASE 
            WHEN routine_definition LIKE '%3 minutes%' THEN true
            ELSE false
        END as espera_3min
    FROM information_schema.routines
    WHERE routine_name = 'generate_checkout_links_for_pending_payments'
),
checkouts AS (
    SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (
            WHERE ROUND(EXTRACT(EPOCH FROM (expires_at - created_at)) / 3600, 1) = 24.0
        ) as com_24h
    FROM checkout_links
    WHERE created_at > NOW() - INTERVAL '1 day'
)
SELECT 
    CASE WHEN config.expiracao_24h THEN '‚úÖ' ELSE '‚ùå' END || ' Expira√ß√£o em 24h' as teste_1,
    CASE WHEN funcao.espera_3min THEN '‚úÖ' ELSE '‚ùå' END || ' Cria ap√≥s 3 minutos' as teste_2,
    CASE 
        WHEN checkouts.total > 0 AND checkouts.com_24h = checkouts.total 
        THEN '‚úÖ Checkouts corretos'
        WHEN checkouts.total = 0
        THEN '‚ö†Ô∏è Nenhum checkout recente'
        ELSE '‚ùå ' || checkouts.com_24h::text || ' de ' || checkouts.total::text || ' corretos'
    END as teste_3,
    CASE 
        WHEN config.expiracao_24h AND funcao.espera_3min
        THEN '‚úÖ‚úÖ‚úÖ TUDO FUNCIONANDO!'
        ELSE '‚ùå PRECISA EXECUTAR CORRIGIR-CHECKOUT-3MIN-EXPIRA-24H.sql'
    END as resultado_final
FROM config, funcao, checkouts;

-- ===================================================================
-- INTERPRETA√á√ÉO DOS RESULTADOS
-- ===================================================================
-- 
-- TESTE 1: Deve mostrar pagamentos que aguardam checkout
-- TESTE 2: Deve retornar {"created": X, "errors": 0}
-- TESTE 3: Deve mostrar checkouts com "24 horas (correto!)"
-- TESTE 4: Deve mostrar "‚úÖ Configurado para 24 horas"
-- TESTE 5: Deve mostrar "‚úÖ Fun√ß√£o correta (espera 3 minutos)"
-- TESTE 6 (RESUMO): Deve mostrar "‚úÖ‚úÖ‚úÖ TUDO FUNCIONANDO!"
--
-- SE VER "‚ùå" EM QUALQUER TESTE:
-- Execute: CORRIGIR-CHECKOUT-3MIN-EXPIRA-24H.sql
-- ===================================================================

