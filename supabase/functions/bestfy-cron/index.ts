// Edge Function para executar sincroniza√ß√£o via Cron Job
// Esta fun√ß√£o pode ser chamada por servi√ßos como GitHub Actions, Vercel Cron, etc.

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

Deno.serve(async (req: Request) => {
  try {
    console.log(`‚è∞ [CRON] Executando sincroniza√ß√£o autom√°tica via Cron Job`);

    // Handle CORS preflight requests
    if (req.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: corsHeaders,
      });
    }

    // S√≥ aceita POST para execu√ß√£o do cron
    if (req.method !== "POST") {
      return new Response(
        JSON.stringify({ 
          error: "Method not allowed",
          message: "Use POST para executar sincroniza√ß√£o"
        }),
        {
          status: 405,
          headers: {
            ...corsHeaders,
            "Content-Type": "application/json",
          },
        }
      );
    }

    // Verifica se tem token de autoriza√ß√£o (opcional, para seguran√ßa)
    const authHeader = req.headers.get('Authorization');
    const cronSecret = Deno.env.get('CRON_SECRET');
    
    if (cronSecret && authHeader !== `Bearer ${cronSecret}`) {
      console.log(`üîí [CRON] Token de autoriza√ß√£o inv√°lido ou ausente`);
      return new Response(
        JSON.stringify({ 
          error: "Unauthorized",
          message: "Token de autoriza√ß√£o inv√°lido"
        }),
        {
          status: 401,
          headers: {
            ...corsHeaders,
            "Content-Type": "application/json",
          },
        }
      );
    }

    // Chama a fun√ß√£o de sincroniza√ß√£o
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    if (!supabaseUrl) {
      throw new Error('SUPABASE_URL n√£o configurada');
    }

    const syncUrl = `${supabaseUrl}/functions/v1/bestfy-sync`;
    console.log(`üîÑ [CRON] Chamando fun√ß√£o de sincroniza√ß√£o: ${syncUrl}`);

    const syncResponse = await fetch(syncUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')}`,
      }
    });

    if (!syncResponse.ok) {
      const errorText = await syncResponse.text();
      throw new Error(`Erro na sincroniza√ß√£o: ${syncResponse.status} - ${errorText}`);
    }

    const syncResult = await syncResponse.json();

    console.log(`‚úÖ [CRON] Sincroniza√ß√£o conclu√≠da:`, syncResult.stats);

    // Envia emails de recupera√ß√£o
    const recoveryEmailsUrl = `${supabaseUrl}/functions/v1/send-recovery-emails`;
    console.log(`üìß [CRON] Verificando emails de recupera√ß√£o: ${recoveryEmailsUrl}`);

    const recoveryResponse = await fetch(recoveryEmailsUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')}`,
      }
    });

    let recoveryResult = { success: false, stats: { total: 0, sent: 0, failed: 0 } };
    if (recoveryResponse.ok) {
      recoveryResult = await recoveryResponse.json();
      console.log(`‚úÖ [CRON] Recovery emails processados:`, recoveryResult.stats);
    } else {
      const errorText = await recoveryResponse.text();
      console.error(`‚ùå [CRON] Erro ao processar recovery emails: ${errorText}`);
    }

    return new Response(
      JSON.stringify({
        success: true,
        message: "Sincroniza√ß√£o autom√°tica executada com sucesso",
        cron_execution: {
          timestamp: new Date().toISOString(),
          triggered_by: "cron_job"
        },
        sync_result: syncResult,
        recovery_emails: recoveryResult
      }),
      {
        status: 200,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );

  } catch (error) {
    console.error(`‚ùå [CRON] Erro na execu√ß√£o do cron job:`, error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: "Cron job execution failed",
        message: error instanceof Error ? error.message : "Unknown error",
        timestamp: new Date().toISOString()
      }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );
  }
});