-- ===================================================================
-- üßπ LIMPAR BANCO DE DADOS - MANTER ESTRUTURA
-- ===================================================================
-- Remove todos os dados mas mant√©m tabelas, fun√ß√µes, triggers, etc.
-- ===================================================================

-- PASSO 1: Verificar dados ANTES da limpeza
SELECT 'üìä ANTES DA LIMPEZA' as titulo;

SELECT 
    'payments' as tabela,
    COUNT(*)::text as total_registros
FROM payments
UNION ALL
SELECT 
    'checkout_links' as tabela,
    COUNT(*)::text as total_registros
FROM checkout_links
UNION ALL
SELECT 
    'api_keys' as tabela,
    COUNT(*)::text as total_registros
FROM api_keys
UNION ALL
SELECT 
    'profiles' as tabela,
    COUNT(*)::text as total_registros
FROM profiles
WHERE EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles')
UNION ALL
SELECT 
    'auth.users' as tabela,
    COUNT(*)::text as total_registros
FROM auth.users;

-- ===================================================================
-- PASSO 2: LIMPAR TODAS AS TABELAS (respeitando foreign keys)
-- ===================================================================

-- Desabilitar verifica√ß√£o de foreign key temporariamente
SET session_replication_role = 'replica';

-- Limpar tabelas na ordem correta
TRUNCATE TABLE checkout_links CASCADE;
TRUNCATE TABLE payments CASCADE;
TRUNCATE TABLE api_keys CASCADE;

-- Limpar profiles se existir
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles') THEN
        TRUNCATE TABLE profiles CASCADE;
        RAISE NOTICE '‚úÖ Tabela profiles limpa';
    END IF;
END $$;

-- Reabilitar verifica√ß√£o de foreign key
SET session_replication_role = 'origin';

-- ===================================================================
-- PASSO 3: LIMPAR USU√ÅRIOS DO SUPABASE AUTH
-- ===================================================================

-- Deletar todas as identidades primeiro
DELETE FROM auth.identities;

-- Deletar todos os usu√°rios
DELETE FROM auth.users;

-- ===================================================================
-- PASSO 4: VERIFICAR LIMPEZA
-- ===================================================================

SELECT '‚úÖ AP√ìS LIMPEZA' as titulo;

SELECT 
    'payments' as tabela,
    COUNT(*)::text as total_registros,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ LIMPO' ELSE '‚ö†Ô∏è AINDA TEM DADOS' END as status
FROM payments
UNION ALL
SELECT 
    'checkout_links' as tabela,
    COUNT(*)::text as total_registros,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ LIMPO' ELSE '‚ö†Ô∏è AINDA TEM DADOS' END as status
FROM checkout_links
UNION ALL
SELECT 
    'api_keys' as tabela,
    COUNT(*)::text as total_registros,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ LIMPO' ELSE '‚ö†Ô∏è AINDA TEM DADOS' END as status
FROM api_keys
UNION ALL
SELECT 
    'profiles' as tabela,
    COUNT(*)::text as total_registros,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ LIMPO' ELSE '‚ö†Ô∏è AINDA TEM DADOS' END as status
FROM profiles
WHERE EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles')
UNION ALL
SELECT 
    'auth.users' as tabela,
    COUNT(*)::text as total_registros,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ LIMPO' ELSE '‚ö†Ô∏è AINDA TEM DADOS' END as status
FROM auth.users;

-- ===================================================================
-- PASSO 5: VERIFICAR ESTRUTURA (deve estar intacta)
-- ===================================================================

SELECT 'üìã ESTRUTURA MANTIDA' as titulo;

SELECT 
    table_name as tabela,
    (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name)::text as colunas,
    '‚úÖ OK' as status
FROM information_schema.tables t
WHERE table_schema = 'public'
AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- ===================================================================
-- PASSO 6: VERIFICAR FUN√á√ïES E TRIGGERS
-- ===================================================================

SELECT 'üîß FUN√á√ïES' as tipo, COUNT(*)::text as quantidade
FROM information_schema.routines
WHERE routine_schema = 'public'
UNION ALL
SELECT '‚ö° TRIGGERS' as tipo, COUNT(*)::text as quantidade
FROM information_schema.triggers
WHERE trigger_schema = 'public'
OR (event_object_schema = 'auth' AND event_object_table = 'users');

-- ===================================================================
-- ‚úÖ RESULTADO ESPERADO:
-- ===================================================================
-- ANTES DA LIMPEZA:
--   - V√°rias linhas em cada tabela
-- 
-- AP√ìS LIMPEZA:
--   - 0 registros em todas as tabelas ‚úÖ
--   - Todas as tabelas: ‚úÖ LIMPO
-- 
-- ESTRUTURA MANTIDA:
--   - Todas as tabelas existem ‚úÖ
--   - Todas as colunas preservadas ‚úÖ
--   - Fun√ß√µes e triggers intactos ‚úÖ
-- ===================================================================

-- ===================================================================
-- üéØ PR√ìXIMOS PASSOS:
-- ===================================================================
-- 1. Banco est√° limpo e pronto
-- 2. Estrutura completa mantida
-- 3. Agora voc√™ pode:
--    - Criar novo usu√°rio via Sign Up
--    - Testar sistema do zero
--    - Come√ßar fresh sem dados antigos
-- ===================================================================

