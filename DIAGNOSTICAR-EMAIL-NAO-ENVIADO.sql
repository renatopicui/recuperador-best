-- ===================================================================
-- üîç DIAGNOSTICAR POR QUE EMAIL DE RECUPERA√á√ÉO N√ÉO FOI ENVIADO
-- ===================================================================
-- Email: renatopicui1@gmail.com
-- ===================================================================

-- PASSO 1: BUSCAR O PAGAMENTO
SELECT 'üîç BUSCANDO PAGAMENTO...' as status;

SELECT 
    'üìã DADOS DO PAGAMENTO' as tipo,
    id,
    user_id,
    bestfy_id,
    customer_name,
    customer_email,
    amount,
    status,
    created_at,
    recovery_email_sent_at,
    CASE 
        WHEN recovery_email_sent_at IS NOT NULL 
        THEN '‚úÖ Email J√Å foi enviado em: ' || recovery_email_sent_at::text
        ELSE '‚ùå Email N√ÉO foi enviado'
    END as status_email,
    CASE 
        WHEN created_at < NOW() - INTERVAL '1 hour'
        THEN '‚úÖ Passou 1 hora (deveria ter enviado)'
        ELSE '‚è≥ Ainda n√£o passou 1 hora (aguardando)'
    END as tempo_desde_criacao,
    EXTRACT(EPOCH FROM (NOW() - created_at)) / 3600 as horas_desde_criacao
FROM payments
WHERE customer_email = 'renatopicui1@gmail.com'
ORDER BY created_at DESC;

-- ===================================================================

-- PASSO 2: VERIFICAR CONFIGURA√á√ÉO DE EMAIL DO USU√ÅRIO
SELECT 'üîç VERIFICANDO CONFIGURA√á√ÉO DE EMAIL...' as status;

SELECT 
    'üìß EMAIL_SETTINGS' as tipo,
    es.id,
    es.user_id,
    es.from_email,
    es.from_name,
    es.is_active,
    CASE 
        WHEN es.postmark_token IS NOT NULL 
        THEN '‚úÖ Token Postmark configurado'
        ELSE '‚ùå Token Postmark N√ÉO configurado'
    END as postmark_status,
    es.created_at
FROM email_settings es
WHERE es.user_id IN (
    SELECT user_id 
    FROM payments 
    WHERE customer_email = 'renatopicui1@gmail.com'
);

-- Se n√£o encontrar configura√ß√£o
SELECT 
    '‚ö†Ô∏è DIAGN√ìSTICO' as tipo,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM email_settings 
            WHERE user_id IN (
                SELECT user_id FROM payments 
                WHERE customer_email = 'renatopicui1@gmail.com'
            )
        )
        THEN '‚ùå PROBLEMA: Usu√°rio N√ÉO tem email_settings configurado!'
        ELSE '‚úÖ Configura√ß√£o de email existe'
    END as resultado;

-- ===================================================================

-- PASSO 3: VERIFICAR SE H√Å CHECKOUT LINK CRIADO
SELECT 'üîç VERIFICANDO CHECKOUT LINKS...' as status;

SELECT 
    'üîó CHECKOUT_LINKS' as tipo,
    cl.id,
    cl.checkout_slug,
    cl.thank_you_slug,
    cl.payment_status,
    cl.created_at,
    cl.expires_at,
    'http://localhost:5173/checkout/' || cl.checkout_slug as link_completo,
    CASE 
        WHEN cl.id IS NOT NULL 
        THEN '‚úÖ Checkout link EXISTE'
        ELSE '‚ùå Checkout link N√ÉO foi criado'
    END as status_checkout
FROM checkout_links cl
WHERE cl.payment_id IN (
    SELECT id FROM payments 
    WHERE customer_email = 'renatopicui1@gmail.com'
);

-- Se n√£o encontrar checkout
SELECT 
    '‚ö†Ô∏è DIAGN√ìSTICO' as tipo,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM checkout_links 
            WHERE payment_id IN (
                SELECT id FROM payments 
                WHERE customer_email = 'renatopicui1@gmail.com'
            )
        )
        THEN '‚ùå PROBLEMA: Checkout link N√ÉO foi criado!'
        ELSE '‚úÖ Checkout link existe'
    END as resultado;

-- ===================================================================

-- PASSO 4: VERIFICAR CRIT√âRIOS PARA ENVIO DE EMAIL
SELECT 'üîç VERIFICANDO CRIT√âRIOS...' as status;

SELECT 
    'üìä AN√ÅLISE DE CRIT√âRIOS' as tipo,
    p.customer_email,
    p.status,
    p.recovery_email_sent_at,
    p.created_at,
    CASE 
        WHEN p.status = 'waiting_payment' 
        THEN '‚úÖ Status correto (waiting_payment)'
        ELSE '‚ùå Status incorreto: ' || p.status
    END as criterio_1_status,
    CASE 
        WHEN p.created_at < NOW() - INTERVAL '1 hour'
        THEN '‚úÖ Passou 1 hora'
        ELSE '‚ùå Ainda n√£o passou 1 hora'
    END as criterio_2_tempo,
    CASE 
        WHEN p.recovery_email_sent_at IS NULL
        THEN '‚úÖ Email ainda n√£o foi enviado'
        ELSE '‚ùå Email j√° foi enviado'
    END as criterio_3_nao_enviado,
    CASE 
        WHEN p.status = 'waiting_payment' 
        AND p.created_at < NOW() - INTERVAL '1 hour'
        AND p.recovery_email_sent_at IS NULL
        THEN '‚úÖ DEVERIA ENVIAR EMAIL!'
        ELSE '‚ùå N√ÉO deve enviar (n√£o atende crit√©rios)'
    END as resultado_final
FROM payments p
WHERE p.customer_email = 'renatopicui1@gmail.com'
ORDER BY p.created_at DESC;

-- ===================================================================

-- PASSO 5: VERIFICAR SE CRON JOB EST√Å ATIVO
SELECT 'üîç VERIFICANDO CRON JOBS...' as status;

SELECT 
    '‚è∞ CRON JOBS' as tipo,
    jobname,
    schedule,
    active,
    CASE 
        WHEN active THEN '‚úÖ Ativo'
        ELSE '‚ùå Inativo'
    END as status_cron
FROM cron.job
WHERE jobname LIKE '%recovery%' OR jobname LIKE '%email%';

-- ===================================================================

-- PASSO 6: RESUMO DO DIAGN√ìSTICO
SELECT 'üìã RESUMO DO DIAGN√ìSTICO' as status;

WITH payment_info AS (
    SELECT 
        id,
        user_id,
        customer_email,
        status,
        recovery_email_sent_at,
        created_at,
        EXTRACT(EPOCH FROM (NOW() - created_at)) / 3600 as horas_desde_criacao
    FROM payments
    WHERE customer_email = 'renatopicui1@gmail.com'
    ORDER BY created_at DESC
    LIMIT 1
),
email_config AS (
    SELECT COUNT(*) > 0 as tem_config
    FROM email_settings
    WHERE user_id IN (SELECT user_id FROM payment_info)
),
checkout_link AS (
    SELECT COUNT(*) > 0 as tem_checkout
    FROM checkout_links
    WHERE payment_id IN (SELECT id FROM payment_info)
)
SELECT 
    'üéØ DIAGN√ìSTICO FINAL' as tipo,
    pi.customer_email,
    pi.status as payment_status,
    ROUND(pi.horas_desde_criacao, 2) as horas_desde_criacao,
    CASE WHEN ec.tem_config THEN 'SIM' ELSE 'N√ÉO' END as tem_email_config,
    CASE WHEN cl.tem_checkout THEN 'SIM' ELSE 'N√ÉO' END as tem_checkout_link,
    CASE WHEN pi.recovery_email_sent_at IS NULL THEN 'N√ÉO' ELSE 'SIM' END as email_enviado,
    CASE 
        -- Problema 1: N√£o tem configura√ß√£o de email
        WHEN NOT ec.tem_config 
        THEN '‚ùå PROBLEMA: Usu√°rio n√£o configurou Postmark (email_settings)'
        
        -- Problema 2: Ainda n√£o passou 1 hora
        WHEN pi.horas_desde_criacao < 1
        THEN '‚è≥ AGUARDANDO: Ainda n√£o passou 1 hora (faltam ' || 
             ROUND((1 - pi.horas_desde_criacao) * 60, 0)::text || ' minutos)'
        
        -- Problema 3: Pagamento j√° foi pago
        WHEN pi.status != 'waiting_payment'
        THEN '‚úÖ OK: Pagamento j√° foi confirmado (status: ' || pi.status || ')'
        
        -- Problema 4: Email j√° foi enviado
        WHEN pi.recovery_email_sent_at IS NOT NULL
        THEN '‚úÖ Email j√° foi enviado em: ' || pi.recovery_email_sent_at::text
        
        -- Problema 5: Cron job n√£o rodou ainda
        WHEN pi.status = 'waiting_payment' 
        AND pi.horas_desde_criacao >= 1
        AND pi.recovery_email_sent_at IS NULL
        AND ec.tem_config
        THEN '‚ö†Ô∏è PROBLEMA: Atende todos os crit√©rios mas email n√£o foi enviado! Cron job pode n√£o estar ativo.'
        
        ELSE '‚ùì Situa√ß√£o desconhecida'
    END as diagnostico
FROM payment_info pi
CROSS JOIN email_config ec
CROSS JOIN checkout_link cl;

-- ===================================================================

-- PASSO 7: SOLU√á√ÉO SUGERIDA
SELECT 'üí° SOLU√á√ïES POSS√çVEIS' as status;

SELECT 
    'üí° A√á√ÉO RECOMENDADA' as tipo,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM email_settings 
            WHERE user_id IN (
                SELECT user_id FROM payments 
                WHERE customer_email = 'renatopicui1@gmail.com'
            )
        )
        THEN 'Configurar Postmark no Dashboard ‚Üí Configurar Email'
        
        WHEN EXISTS (
            SELECT 1 FROM payments 
            WHERE customer_email = 'renatopicui1@gmail.com'
            AND status = 'waiting_payment'
            AND created_at < NOW() - INTERVAL '1 hour'
            AND recovery_email_sent_at IS NULL
        )
        THEN 'Executar manualmente a fun√ß√£o send_recovery_emails ou aguardar pr√≥ximo cron (roda a cada 1h)'
        
        ELSE 'Email ser√° enviado automaticamente quando passar 1 hora'
    END as solucao;

-- ===================================================================

-- PASSO 8: FOR√áAR ENVIO MANUAL (OPCIONAL)
-- Descomente apenas se quiser enviar email AGORA, sem esperar cron
-- SELECT '‚ö†Ô∏è PARA FOR√áAR ENVIO MANUAL, EXECUTE:' as status;
-- SELECT 'SELECT net.http_post(url := ''https://SEU-PROJETO.supabase.co/functions/v1/send-recovery-emails'')' as comando;

-- ===================================================================
-- ‚úÖ DIAGN√ìSTICO COMPLETO
-- ===================================================================
-- Este script mostra exatamente por que o email n√£o foi enviado
-- e sugere a solu√ß√£o apropriada
-- ===================================================================

